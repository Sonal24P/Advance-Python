{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2e2dc2b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymongo\n",
    "from pymongo import MongoClient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "de66f105",
   "metadata": {},
   "outputs": [],
   "source": [
    "client = MongoClient(\"localhost\", 27017) # connect to Mongo Server\n",
    "db = client.test   # create  database\n",
    "employee = db.employee  # create table\n",
    "employee_details = {\"Name\": \"Sonal Parmar\", \"Address\": \"101 Heaslip Terrace, Scarborough, ON\",\"Age\":\"23\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "542900a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# insert one record\n",
    "result = employee.insert_one(employee_details) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c82c1209",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "664e8d71e0468a0189583688\n"
     ]
    }
   ],
   "source": [
    "print(result.inserted_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "94b732ed",
   "metadata": {},
   "outputs": [
    {
     "ename": "BulkWriteError",
     "evalue": "batch op errors occurred, full error: {'writeErrors': [{'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: test.employee index: _id_ dup key: { _id: 11 }', 'keyPattern': {'_id': 1}, 'keyValue': {'_id': 11}, 'op': {'_id': 11, 'name': 'John', 'address': 'Highway 37'}}], 'writeConcernErrors': [], 'nInserted': 0, 'nUpserted': 0, 'nMatched': 0, 'nModified': 0, 'nRemoved': 0, 'upserted': []}",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mBulkWriteError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 11\u001b[0m\n\u001b[0;32m      1\u001b[0m mylist \u001b[38;5;241m=\u001b[39m [{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_id\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m11\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mJohn\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124maddress\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mHighway 37\u001b[39m\u001b[38;5;124m\"\u001b[39m},\n\u001b[0;32m      2\u001b[0m           {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_id\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m12\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPeter\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124maddress\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLowstreet 27\u001b[39m\u001b[38;5;124m\"\u001b[39m},\n\u001b[0;32m      3\u001b[0m           {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_id\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m13\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAmy\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124maddress\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLowstreet 27\u001b[39m\u001b[38;5;124m\"\u001b[39m},\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m      8\u001b[0m           {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_id\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m18\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNancy\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124maddress\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYounge Ave. 123\u001b[39m\u001b[38;5;124m\"\u001b[39m},\n\u001b[0;32m      9\u001b[0m           {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_id\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m19\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mViola\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124maddress\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSideway Ave\u001b[39m\u001b[38;5;124m\"\u001b[39m}]\n\u001b[1;32m---> 11\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[43memployee\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minsert_many\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmylist\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# insert multiple records\u001b[39;00m\n",
      "File \u001b[1;32mD:\\conda\\Lib\\site-packages\\pymongo\\_csot.py:108\u001b[0m, in \u001b[0;36mapply.<locals>.csot_wrapper\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    106\u001b[0m         \u001b[38;5;28;01mwith\u001b[39;00m _TimeoutContext(timeout):\n\u001b[0;32m    107\u001b[0m             \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m--> 108\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mD:\\conda\\Lib\\site-packages\\pymongo\\collection.py:742\u001b[0m, in \u001b[0;36mCollection.insert_many\u001b[1;34m(self, documents, ordered, bypass_document_validation, session, comment)\u001b[0m\n\u001b[0;32m    740\u001b[0m blk \u001b[38;5;241m=\u001b[39m _Bulk(\u001b[38;5;28mself\u001b[39m, ordered, bypass_document_validation, comment\u001b[38;5;241m=\u001b[39mcomment)\n\u001b[0;32m    741\u001b[0m blk\u001b[38;5;241m.\u001b[39mops \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(gen())\n\u001b[1;32m--> 742\u001b[0m \u001b[43mblk\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mwrite_concern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msession\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_Op\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mINSERT\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    743\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m InsertManyResult(inserted_ids, write_concern\u001b[38;5;241m.\u001b[39macknowledged)\n",
      "File \u001b[1;32mD:\\conda\\Lib\\site-packages\\pymongo\\bulk.py:595\u001b[0m, in \u001b[0;36m_Bulk.execute\u001b[1;34m(self, write_concern, session, operation)\u001b[0m\n\u001b[0;32m    593\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    594\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 595\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute_command\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgenerator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwrite_concern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msession\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moperation\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mD:\\conda\\Lib\\site-packages\\pymongo\\bulk.py:462\u001b[0m, in \u001b[0;36m_Bulk.execute_command\u001b[1;34m(self, generator, write_concern, session, operation)\u001b[0m\n\u001b[0;32m    452\u001b[0m client\u001b[38;5;241m.\u001b[39m_retryable_write(\n\u001b[0;32m    453\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mis_retryable,\n\u001b[0;32m    454\u001b[0m     retryable_bulk,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    458\u001b[0m     operation_id\u001b[38;5;241m=\u001b[39mop_id,\n\u001b[0;32m    459\u001b[0m )\n\u001b[0;32m    461\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m full_result[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwriteErrors\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01mor\u001b[39;00m full_result[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwriteConcernErrors\u001b[39m\u001b[38;5;124m\"\u001b[39m]:\n\u001b[1;32m--> 462\u001b[0m     \u001b[43m_raise_bulk_write_error\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfull_result\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    463\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m full_result\n",
      "File \u001b[1;32mD:\\conda\\Lib\\site-packages\\pymongo\\bulk.py:165\u001b[0m, in \u001b[0;36m_raise_bulk_write_error\u001b[1;34m(full_result)\u001b[0m\n\u001b[0;32m    159\u001b[0m         errmsg \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    160\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis MongoDB deployment does not support \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    161\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mretryable writes. Please add retryWrites=false \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    162\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mto your connection string.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    163\u001b[0m         )\n\u001b[0;32m    164\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m OperationFailure(errmsg, code, full_result)\n\u001b[1;32m--> 165\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m BulkWriteError(full_result)\n",
      "\u001b[1;31mBulkWriteError\u001b[0m: batch op errors occurred, full error: {'writeErrors': [{'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: test.employee index: _id_ dup key: { _id: 11 }', 'keyPattern': {'_id': 1}, 'keyValue': {'_id': 11}, 'op': {'_id': 11, 'name': 'John', 'address': 'Highway 37'}}], 'writeConcernErrors': [], 'nInserted': 0, 'nUpserted': 0, 'nMatched': 0, 'nModified': 0, 'nRemoved': 0, 'upserted': []}"
     ]
    }
   ],
   "source": [
    "# insert multiple records\n",
    "mylist = [{\"_id\":11,\"name\":\"John\",\"address\":\"Highway 37\"},\n",
    "          {\"_id\":12,\"name\":\"Peter\",\"address\":\"Lowstreet 27\"},\n",
    "          {\"_id\":13,\"name\":\"Amy\",\"address\":\"Lowstreet 27\"},\n",
    "          {\"_id\":14,\"name\":\"Hannah\",\"address\":\"Mountain 21\"},\n",
    "          {\"_id\":15,\"name\":\"Michael\",\"address\":\"Valley 345\"},\n",
    "          {\"_id\":16,\"name\": \"Vicky\", \"address\": \"Lowstreet 27\"},\n",
    "          {\"_id\":17,\"name\": \"Nicky\", \"address\": \"Yellow Garden 23\"},\n",
    "          {\"_id\":18,\"name\": \"Nancy\", \"address\": \"Younge Ave. 123\"},\n",
    "          {\"_id\":19,\"name\": \"Viola\", \"address\": \"Sideway Ave\"}]\n",
    "\n",
    "x = employee.insert_many(mylist) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d8978427",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['admin', 'config', 'local', 'test']\n"
     ]
    }
   ],
   "source": [
    "# list dataBase names\n",
    "print(client.list_database_names())  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cd92a688",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['employee']\n"
     ]
    }
   ],
   "source": [
    "# list collection names\n",
    "print(db.list_collection_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "454aeeed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('664e778506b0f04c789e89fb'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 1, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 3, 'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': ObjectId('664e7dabfcec6b0939c59539'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 11, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 13, 'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'_id': 14, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 16, 'name': 'Vicky', 'address': 'Lowstreet 27'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': ObjectId('664e8d71e0468a0189583688'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n"
     ]
    }
   ],
   "source": [
    "# fetch all the records\n",
    "for x in employee.find():\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1166c9cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('664e778506b0f04c789e89fb'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 1, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 3, 'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n"
     ]
    }
   ],
   "source": [
    "# fetch top 5 records\n",
    "myresult = employee.find().limit(5)\n",
    "for x in myresult:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "04b2e4ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{}\n",
      "{'name': 'John', 'address': 'Highway 37'}\n",
      "{'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{}\n",
      "{'name': 'John', 'address': 'Highway 37'}\n",
      "{'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'name': 'Vicky', 'address': 'Lowstreet 27'}\n",
      "{'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{}\n"
     ]
    }
   ],
   "source": [
    "# find name and address\n",
    "for x in employee.find({},{\"_id\":0,\"name\":1,\"address\":1}): \n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6b9e1763",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('664e778506b0f04c789e89fb'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON'}\n",
      "{'_id': 1, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 3, 'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': ObjectId('664e7dabfcec6b0939c59539'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON'}\n",
      "{'_id': 11, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 13, 'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'_id': 14, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 16, 'name': 'Vicky', 'address': 'Lowstreet 27'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': ObjectId('664e8d71e0468a0189583688'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON'}\n"
     ]
    }
   ],
   "source": [
    "# find all the fields except Age\n",
    "for x in employee.find({},{\"Age\":0}):  \n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "617dbfd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 13, 'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'_id': 16, 'name': 'Vicky', 'address': 'Lowstreet 27'}\n"
     ]
    }
   ],
   "source": [
    "# fetch recod with given address\n",
    "data = {\"address\":'Lowstreet 27'}\n",
    "mydoc = employee.find(data)\n",
    "for item in mydoc:\n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b51afe4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n"
     ]
    }
   ],
   "source": [
    "# fetch last 2 docs\n",
    "mydoc = employee.find(data).limit(-2)\n",
    "for item in mydoc:\n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5b6991aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n"
     ]
    }
   ],
   "source": [
    "# fetch all the records where address starts with \"Y\"\n",
    "myquery = {\"address\": {\"$regex\":\"^V\"}}\n",
    "mydoc = employee.find(myquery)\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "47ed9776",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 3, 'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n"
     ]
    }
   ],
   "source": [
    "# all the records having \"l\" in address\n",
    "myquery = {\"address\":{\"$regex\":\"l\"}} \n",
    "mydoc = employee.find(myquery)\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bd331502",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n"
     ]
    }
   ],
   "source": [
    "#address starting with \"Y\" or \"S\"\n",
    "myquery = {\"$or\":[{\"address\":{\"$regex\":\"Y\"}},{\"address\":{\"$regex\":\"S\"}}]}\n",
    "mydoc =employee.find(myquery)  \n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b45939ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n"
     ]
    }
   ],
   "source": [
    "#address starting with \"Y\" or \"S\"\n",
    "myquery = {\"address\":{\"$regex\":\"^S|^Y\"}} \n",
    "mydoc =employee.find(myquery)\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ed79ad63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n"
     ]
    }
   ],
   "source": [
    "# find the records where address stras with \"Y\" and contains \"1\"\n",
    "myquery ={\"$and\":[{\"address\":{\"$regex\":\"^Y\"}},{\"address\":{\"$regex\":\"1\"}}]}\n",
    "mydoc=employee.find(myquery)\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "94d34a6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n"
     ]
    }
   ],
   "source": [
    "# find the records where address stras with \"Y\" and contains \"1\" and name starts with \"N\"\n",
    "myquery ={\"$and\":[{\"address\":{\"$regex\":\"^Y\"}},{\"address\":{\"$regex\":\"1\"}},{\"name\":{\"$regex\":\"^N\"}}]}\n",
    "mydoc=employee.find(myquery)\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "81237198",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n"
     ]
    }
   ],
   "source": [
    "# find the records where address stras with \"Y\" and contains \"1\" and name != \"Vicky\"\n",
    "myquery = {\"$and\":[{\"address\":{\"$regex\":\"^Y\"}},{\"address\":{\"$regex\":\"1\"}},{\"name\":{\"$ne\":\"Vicky\"}}]}\n",
    "mydoc = employee.find(myquery)\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ab044b4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('664e778506b0f04c789e89fb'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': ObjectId('664e7dabfcec6b0939c59539'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': ObjectId('664e8d71e0468a0189583688'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 3, 'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'_id': 13, 'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 14, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 1, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 11, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 16, 'name': 'Vicky', 'address': 'Lowstreet 27'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n"
     ]
    }
   ],
   "source": [
    "# sort the records by \"name\" column\n",
    "mydoc = employee.find().sort(\"name\")\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6bfaf817",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('664e778506b0f04c789e89fb'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': ObjectId('664e7dabfcec6b0939c59539'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': ObjectId('664e8d71e0468a0189583688'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 3, 'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'_id': 13, 'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 14, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 1, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 11, 'name': 'John', 'address': 'Highway 37'}\n",
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 16, 'name': 'Vicky', 'address': 'Lowstreet 27'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n"
     ]
    }
   ],
   "source": [
    "# sort the recods based on \"name\" and \"_id\"\n",
    "mydoc = employee.find().sort([\"name\",\"_id\"])\n",
    "for doc in mydoc:\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b97d8693",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('664e778506b0f04c789e89fb'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 1, 'name': 'John', 'address': 'Canyon 123'}\n",
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 3, 'name': 'Amy', 'address': 'Close st 652'}\n",
      "{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave 123'}\n",
      "{'_id': ObjectId('664e7dabfcec6b0939c59539'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 11, 'name': 'John', 'address': 'Canyon 123'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 13, 'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'_id': 14, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 16, 'name': 'Vicky', 'address': 'Lowstreet 27'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': ObjectId('664e8d71e0468a0189583688'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n"
     ]
    }
   ],
   "source": [
    "# Update the address value in one record\n",
    "myquery ={\"address\":\"Sideway Ave\"}\n",
    "newvalues ={\"$set\":{\"address\":\"Sideway Ave 123\"}}\n",
    "employee.update_one(myquery,newvalues)\n",
    "for data in employee.find():\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "774e4d53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('664e778506b0f04c789e89fb'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 1, 'name': 'Minnie', 'address': 'Canyon 123'}\n",
      "{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 3, 'name': 'Minnie', 'address': 'Close st 652'}\n",
      "{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 6, 'name': 'Vicky', 'address': 'Yellow Garden 124'}\n",
      "{'_id': 7, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 8, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 9, 'name': 'Viola', 'address': 'Sideway Ave 123'}\n",
      "{'_id': ObjectId('664e7dabfcec6b0939c59539'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n",
      "{'_id': 11, 'name': 'Minnie', 'address': 'Canyon 123'}\n",
      "{'_id': 12, 'name': 'Peter', 'address': 'Lowstreet 27'}\n",
      "{'_id': 13, 'name': 'Amy', 'address': 'Lowstreet 27'}\n",
      "{'_id': 14, 'name': 'Hannah', 'address': 'Mountain 21'}\n",
      "{'_id': 15, 'name': 'Michael', 'address': 'Valley 345'}\n",
      "{'_id': 16, 'name': 'Vicky', 'address': 'Lowstreet 27'}\n",
      "{'_id': 17, 'name': 'Nicky', 'address': 'Yellow Garden 23'}\n",
      "{'_id': 18, 'name': 'Nancy', 'address': 'Younge Ave. 123'}\n",
      "{'_id': 19, 'name': 'Viola', 'address': 'Sideway Ave'}\n",
      "{'_id': ObjectId('664e8d71e0468a0189583688'), 'Name': 'Sonal Parmar', 'Address': '101 Heaslip Terrace, Scarborough, ON', 'Age': '23'}\n"
     ]
    }
   ],
   "source": [
    "# Update the name with \"Minnie\" where address starts with \"C\"\n",
    "myquery ={\"address\":{\"$regex\":\"^C\"}} \n",
    "newvalues ={\"$set\":{\"name\":\"Minnie\"}}\n",
    "mydoc = employee.update_many(myquery,newvalues)\n",
    "for doc in employee.find():\n",
    "    print(doc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "44da1d85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeleteResult({'n': 1, 'ok': 1.0}, acknowledged=True)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# delete one record with address =\"Canyon 123\"\n",
    "db.employee.delete_one({\"address\":\"Canyon 123\"}) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "044fcd7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeleteResult({'n': 1, 'ok': 1.0}, acknowledged=True)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# delete one record with address =\"Younge Ave. 123\"\n",
    "myquery = {\"address\":\"Younge Ave. 123\"}\n",
    "employee.delete_one(myquery) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fe386642",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "# delete all the records where address starts with \"Y\"\n",
    "myquery ={\"address\":{\"$regex\":\"^Y\"}} \n",
    "docs =employee.delete_many(myquery)\n",
    "print(docs.deleted_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "84e40ebb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Deleted Documents: 0\n"
     ]
    }
   ],
   "source": [
    "# delete all the documents\n",
    "docs = employee.delete_many({})\n",
    "print(\"Deleted Documents:\",docs.deleted_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "cc85deb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop collection name\n",
    "employee.drop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "0c023bdd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "print(db.list_collection_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bc3ca2b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c86e2752",
   "metadata": {},
   "source": [
    "# Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "fea26710",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "0f3d03de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define array\n",
    "vecor = np.array([1,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a302a80c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "# access the element from array\n",
    "vector=np.array([1,2,3,4,5,6])\n",
    "print(vector[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "3adeb9e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([2], dtype=int64),)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get index of given item\n",
    "np.where(vector==3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "3195f06d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 4])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#slicing\n",
    "vector[1:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2872a56f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 4])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# negative slicing\n",
    "vector[-5:-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "22a88ee0",
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = np.array([[1,2],[1,2],[1,2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "783d1b28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix[1,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "421f3032",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5, 6],\n",
       "       [8, 9]])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix = np.array([[1,2,3],[4,5,6],[7,8,9]])\n",
    "matrix[1:,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "3059fdd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get num of elements in array\n",
    "matrix.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "cc3453b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 3)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# shape of an array\n",
    "matrix.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "4835176a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dimention of array\n",
    "matrix.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f8b54f88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dot product\n",
    "vec1 = np.array([1,2,3])\n",
    "vec2 = np.array([4,5,6])\n",
    "np.dot(vec1,vec2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "a12a60ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2,  4,  2],\n",
       "       [ 2,  4,  2],\n",
       "       [ 2,  4, 10]])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add mat1 and mat2\n",
    "mat1 = np.array([[1,1,1],[1,1,1],[1,1,2]])\n",
    "mat2 = np.array([[1,3,1],[1,3,1],[1,3,8]])\n",
    "np.add(mat1,mat2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "187eb86b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0, -2,  0],\n",
       "       [ 0, -2,  0],\n",
       "       [ 0, -2, -6]])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Substract mat1 and mat2\n",
    "np.subtract(mat1,mat2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "93a1df2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  3,  1],\n",
       "       [ 1,  3,  1],\n",
       "       [ 1,  3, 16]])"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# multiply all the corresponding items\n",
    "mat1*mat2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c688bb2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3,  9, 10],\n",
       "       [ 3,  9, 10],\n",
       "       [ 4, 12, 18]])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# matrix multiplication\n",
    "np.matmul(mat1,mat2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "1e04f921",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[11, 11, 11],\n",
       "       [11, 11, 11],\n",
       "       [11, 11, 12]])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# adding an item to matrix\n",
    "mat1+10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "8ccf6781",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "Vectorized matrix:\n",
      " [[101 102 103]\n",
      " [104 105 106]\n",
      " [107 108 109]]\n"
     ]
    }
   ],
   "source": [
    "mat = np.array([[1,2,3],[4,5,6],[7,8,9]])\n",
    "print(mat)\n",
    "add_100 = lambda i: i+100\n",
    "vectorized_100 = np.vectorize(add_100)\n",
    "print(\"Vectorized matrix:\\n\",vectorized_100(mat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "e86830b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[101, 102, 103],\n",
       "       [104, 105, 106],\n",
       "       [107, 108, 109]])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mat+100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fe4238d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
